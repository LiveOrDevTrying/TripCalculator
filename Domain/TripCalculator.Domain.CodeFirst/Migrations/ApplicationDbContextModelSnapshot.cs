// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TripCalculator.Domain.CodeFirst;

namespace TripCalculator.Domain.CodeFirst.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TripCalculator.Domain.Lib.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AspNetUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("TripCalculator.Domain.Lib.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimestampTransaction")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TripUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TripUserId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("TripCalculator.Domain.Lib.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TripEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TripName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TripStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("TripCalculator.Domain.Lib.TripUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("TripsUsers");
                });

            modelBuilder.Entity("TripCalculator.Domain.Lib.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TripCalculator.Domain.Lib.ApplicationUser", b =>
                {
                    b.HasOne("TripCalculator.Domain.Lib.User", "User")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("TripCalculator.Domain.Lib.ApplicationUser", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TripCalculator.Domain.Lib.Expense", b =>
                {
                    b.HasOne("TripCalculator.Domain.Lib.TripUser", "TripUser")
                        .WithMany("Expenses")
                        .HasForeignKey("TripUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TripUser");
                });

            modelBuilder.Entity("TripCalculator.Domain.Lib.Trip", b =>
                {
                    b.HasOne("TripCalculator.Domain.Lib.ApplicationUser", "ApplicationUser")
                        .WithMany("Trips")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("TripCalculator.Domain.Lib.TripUser", b =>
                {
                    b.HasOne("TripCalculator.Domain.Lib.Trip", "Trip")
                        .WithMany("TripUsers")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripCalculator.Domain.Lib.User", "User")
                        .WithMany("TripUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TripCalculator.Domain.Lib.User", b =>
                {
                    b.HasOne("TripCalculator.Domain.Lib.ApplicationUser", null)
                        .WithMany("Users")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("TripCalculator.Domain.Lib.ApplicationUser", b =>
                {
                    b.Navigation("Trips");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TripCalculator.Domain.Lib.Trip", b =>
                {
                    b.Navigation("TripUsers");
                });

            modelBuilder.Entity("TripCalculator.Domain.Lib.TripUser", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("TripCalculator.Domain.Lib.User", b =>
                {
                    b.Navigation("ApplicationUser");

                    b.Navigation("TripUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
